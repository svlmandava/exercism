============================= test session starts ==============================
platform linux2 -- Python 2.7.18, pytest-4.6.9, py-1.8.1, pluggy-0.13.0 -- /usr/bin/python2
cachedir: .pytest_cache
rootdir: /home/ub1/code/exercism/python/perfect-numbers
collecting ... collected 13 items

perfect_numbers_test.py::PerfectNumbersTest::test_large_perfect_number_is_classified_correctly PASSED [  7%]
perfect_numbers_test.py::PerfectNumbersTest::test_medium_perfect_number_is_classified_correctly PASSED [ 15%]
perfect_numbers_test.py::PerfectNumbersTest::test_smallest_perfect_number_is_classified_correctly PASSED [ 23%]
perfect_numbers_test.py::AbundantNumbersTest::test_large_abundant_number_is_classified_correctly PASSED [ 30%]
perfect_numbers_test.py::AbundantNumbersTest::test_medium_abundant_number_is_classified_correctly PASSED [ 38%]
perfect_numbers_test.py::AbundantNumbersTest::test_smallest_abundant_number_is_classified_correctly PASSED [ 46%]
perfect_numbers_test.py::DeficientNumbersTest::test_edge_case_no_factors_other_than_itself_is_classified_correctly PASSED [ 53%]
perfect_numbers_test.py::DeficientNumbersTest::test_large_deficient_number_is_classified_correctly PASSED [ 61%]
perfect_numbers_test.py::DeficientNumbersTest::test_medium_deficient_number_is_classified_correctly PASSED [ 69%]
perfect_numbers_test.py::DeficientNumbersTest::test_smallest_non_prime_deficient_number_is_classified_correctly PASSED [ 76%]
perfect_numbers_test.py::DeficientNumbersTest::test_smallest_prime_deficient_number_is_classified_correctly PASSED [ 84%]
perfect_numbers_test.py::InvalidInputsTest::test_negative_integer_is_rejected_as_it_is_not_a_positive_integer FAILED [ 92%]
perfect_numbers_test.py::InvalidInputsTest::test_zero_is_rejected_as_it_is_not_a_positive_integer FAILED [100%]

=================================== FAILURES ===================================
_ InvalidInputsTest.test_negative_integer_is_rejected_as_it_is_not_a_positive_integer _

self = <perfect_numbers_test.InvalidInputsTest testMethod=test_negative_integer_is_rejected_as_it_is_not_a_positive_integer>

    def test_negative_integer_is_rejected_as_it_is_not_a_positive_integer(self):
>       with self.assertRaisesWithMessage(ValueError):

perfect_numbers_test.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <perfect_numbers_test.InvalidInputsTest testMethod=test_negative_integer_is_rejected_as_it_is_not_a_positive_integer>
exception = <type 'exceptions.ValueError'>

    def assertRaisesWithMessage(self, exception):
>       return self.assertRaisesRegex(exception, r".+")
E       AttributeError: 'InvalidInputsTest' object has no attribute 'assertRaisesRegex'

perfect_numbers_test.py:58: AttributeError
___ InvalidInputsTest.test_zero_is_rejected_as_it_is_not_a_positive_integer ____

self = <perfect_numbers_test.InvalidInputsTest testMethod=test_zero_is_rejected_as_it_is_not_a_positive_integer>

    def test_zero_is_rejected_as_it_is_not_a_positive_integer(self):
>       with self.assertRaisesWithMessage(ValueError):

perfect_numbers_test.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <perfect_numbers_test.InvalidInputsTest testMethod=test_zero_is_rejected_as_it_is_not_a_positive_integer>
exception = <type 'exceptions.ValueError'>

    def assertRaisesWithMessage(self, exception):
>       return self.assertRaisesRegex(exception, r".+")
E       AttributeError: 'InvalidInputsTest' object has no attribute 'assertRaisesRegex'

perfect_numbers_test.py:58: AttributeError
===================== 2 failed, 11 passed in 13.66 seconds =====================
